# Azure App Service Configuration File
# This file configures Azure-specific settings for optimal performance

# Node.js version specification
engines:
  node: "18.x"
  npm: "9.x"

# Build configuration for Azure
scripts:
  postinstall: |
    if [ "$NODE_ENV" = "production" ]; then
      echo "Building for production..."
      npm run build
      cd client && npm ci --production=false && npm run build
    fi

# Azure App Service startup configuration
web.config: |
  <?xml version="1.0" encoding="utf-8"?>
  <configuration>
    <system.webServer>
      <handlers>
        <add name="iisnode" path="dist/index.js" verb="*" modules="iisnode"/>
      </handlers>
      <rewrite>
        <rules>
          <!-- Static files caching -->
          <rule name="StaticContent">
            <match url="^(static/|favicon\.ico|manifest\.json|logo.*\.png)"/>
            <action type="Rewrite" url="{R:0}"/>
            <serverVariables>
              <set name="RESPONSE_Cache-Control" value="public, max-age=31536000"/>
            </serverVariables>
          </rule>
          
          <!-- API routes -->
          <rule name="ApiRoutes" stopProcessing="true">
            <match url="^(api|health)/.*"/>
            <action type="Rewrite" url="dist/index.js"/>
          </rule>
          
          <!-- SPA fallback -->
          <rule name="SpaFallback" stopProcessing="true">
            <match url=".*"/>
            <conditions logicalGrouping="MatchAll">
              <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true"/>
              <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true"/>
            </conditions>
            <action type="Rewrite" url="client/build/index.html"/>
          </rule>
        </rules>
      </rewrite>
      
      <!-- Security headers -->
      <httpProtocol>
        <customHeaders>
          <add name="X-Content-Type-Options" value="nosniff"/>
          <add name="X-Frame-Options" value="DENY"/>
          <add name="X-XSS-Protection" value="1; mode=block"/>
          <add name="Strict-Transport-Security" value="max-age=31536000; includeSubDomains"/>
        </customHeaders>
      </httpProtocol>
      
      <!-- Compression for better performance -->
      <urlCompression doStaticCompression="true" doDynamicCompression="true"/>
      
      <!-- Error handling -->
      <httpErrors errorMode="Custom">
        <remove statusCode="404"/>
        <error statusCode="404" path="client/build/index.html" responseMode="ExecuteURL"/>
      </httpErrors>
    </system.webServer>
  </configuration>

# IISNode configuration for Azure App Service
iisnode.yml: |
  # Node.js startup file
  nodeProcessCommandLine: "D:\Program Files (x86)\nodejs\18.17.1\node.exe"
  
  # Application configuration
  node_env: production
  
  # Logging configuration
  loggingEnabled: true
  logDirectory: LogFiles\Application
  
  # Performance settings
  maxConcurrentRequestsPerProcess: 1024
  maxNamedPipeConnectionRetry: 3
  namedPipeConnectionRetryDelay: 250
  maxNamedPipeConnectionPoolSize: 512
  maxNamedPipePooledConnectionAge: 30000
  asyncCompletionThreadCount: 0
  initialRequestBufferSize: 4096
  maxRequestBufferSize: 65536
  watchedFiles: "*.js;*.json"
  uncFileChangesPollingInterval: 5000
  gracefulShutdownTimeout: 60000
  
  # Memory management
  nodeProcessCountPerApplication: 1
  maxConcurrentRequestsPerProcess: 1024
  
  # Error handling
  promoteServerVars: "LOGON_USER,AUTH_USER,AUTH_TYPE"
  flushResponse: false
  enableXFF: true

# Package.json scripts for Azure deployment
deployment_scripts:
  build: |
    echo "Building Nexus AI for Azure..."
    npm ci --production=false
    npm run build
    echo "Building client..."
    cd client
    npm ci --production=false
    npm run build
    cd ..
    echo "Build completed successfully"
  
  start: |
    echo "Starting Nexus AI server..."
    node dist/index.js
  
  prestart: |
    echo "Pre-start checks..."
    if [ ! -d "dist" ]; then
      echo "Dist folder not found, building..."
      npm run build
    fi
    if [ ! -d "client/build" ]; then
      echo "Client build not found, building..."
      cd client && npm run build && cd ..
    fi

# Environment variables template for Azure App Service
app_settings:
  # Core application settings
  NODE_ENV: "production"
  PORT: "80"
  WEBSITE_NODE_DEFAULT_VERSION: "18-lts"
  
  # Build settings
  SCM_DO_BUILD_DURING_DEPLOYMENT: "true"
  ENABLE_ORYX_BUILD: "true"
  BUILD_FLAGS: "--production=false"
  
  # Cache busting
  BUILD_TIMESTAMP: "${BUILD_TIMESTAMP}"
  WEBSITE_RUN_FROM_PACKAGE: "1"
  
  # Application URLs
  WEBSITE_URL: "https://${AZURE_APP_NAME}.azurewebsites.net"
  CORS_ORIGIN: "https://${AZURE_APP_NAME}.azurewebsites.net"
  REACT_APP_API_URL: "https://${AZURE_APP_NAME}.azurewebsites.net/api"
  
  # Performance settings
  WEBSITES_ENABLE_APP_SERVICE_STORAGE: "false"
  WEBSITES_CONTAINER_START_TIME_LIMIT: "600"
  WEBSITE_HTTPLOGGING_RETENTION_DAYS: "7"
  
  # Security settings
  WEBSITES_ENABLE_SYNC_UPDATE_SITE: "true"
  WEBSITE_ENABLE_SYNC_UPDATE_SITE: "true"
  
  # Monitoring
  APPINSIGHTS_INSTRUMENTATIONKEY: "${APPINSIGHTS_KEY}"
  ApplicationInsightsAgent_EXTENSION_VERSION: "~3"
  
  # Custom application settings (to be set in Azure Portal)
  TELEGRAM_BOT_TOKEN: "${TELEGRAM_BOT_TOKEN}"
  MONGO_URI: "${MONGODB_CONNECTION_STRING}"
  JWT_SECRET: "${JWT_SECRET}"
  GEMINI_API_KEY: "${GEMINI_API_KEY}"
  PERPLEXITY_API_KEY: "${PERPLEXITY_API_KEY}"
  HUGGINGFACE_API_KEY: "${HUGGINGFACE_API_KEY}"
  
  # Rate limiting and features
  RATE_LIMIT_WINDOW_MS: "900000"
  RATE_LIMIT_MAX_REQUESTS: "200"
  ENABLE_RATE_LIMITING: "true"
  ENABLE_TELEGRAM_BOT: "true"
  ENABLE_SOCKET_IO: "true"

# Deployment slots configuration for zero-downtime deployments
deployment_slots:
  staging:
    app_settings:
      NODE_ENV: "staging"
      WEBSITE_URL: "https://${AZURE_APP_NAME}-staging.azurewebsites.net"
      CORS_ORIGIN: "https://${AZURE_APP_NAME}-staging.azurewebsites.net"
      REACT_APP_API_URL: "https://${AZURE_APP_NAME}-staging.azurewebsites.net/api"

# Auto-scaling configuration (for Standard tier and above)
auto_scaling:
  enabled: true
  min_instances: 1
  max_instances: 3
  scale_up_cpu_threshold: 70
  scale_down_cpu_threshold: 30
  scale_up_duration: 10  # minutes
  scale_down_duration: 20  # minutes