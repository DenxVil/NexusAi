import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';

interface LanguageContextType {
  currentLanguage: string;
  setLanguage: (lang: string) => void;
  t: (key: string) => string;
  getRandomAIResponse: () => string;
}

interface LanguageProviderProps {
  children: ReactNode;
}

// Translation data
const translations = {
  en: {
    // Navigation
    'dashboard': 'Dashboard',
    'chat': 'Chat',
    'profile': 'Profile',
    'login': 'Login',
    'register': 'Sign Up',
    'logout': 'Logout',
    
    // Common
    'language': 'Language',
    'aiService': 'AI Service',
    'toggleTheme': 'Toggle theme',
    'settings': 'Settings',
    'send': 'Send',
    'generateImage': 'Generate Image',
    'typeMessage': 'Type your message...',
    'imagePrompt': 'Describe the image you want to generate...',
    
    // Welcome messages
    'welcomeTitle': 'Welcome to т╡в╔з╬▒╔│ Aт╡К! ЁЯСЛ',
    'welcomeMessage': 'Your intelligent AI assistant with emotional understanding',
    
    // Branding
    'appName': 'т╡в╔з╬▒╔│ Aт╡К',
    'tagline': 'Created by тЧЙ╞К╤Ф╨╕╬╜╬╣тДУ',
    'description': 'AI-powered application platform providing intelligent conversation and AI services.',
    
    // AI Personality responses (emotional/humorous)
    'aiResponses': [
      "Oh wow! ЁЯдй That's such a fascinating question! I'm genuinely excited to dive into this with you. Let me share some insights that might make you go 'aha!' ЁЯТб",
      "Haha, I love how your mind works! ЁЯШД This reminds me of... well, let me explain with a sprinkle of humor and a dash of wisdom! тЬи",
      "You know what? ЁЯдФ I was just thinking about something similar! It's like when you're trying to find your keys and they're in your hand all along - but in a good way! Let me break this down...",
      "*adjusts imaginary glasses* ЁЯдУ Alright, buckle up buttercup! We're about to embark on an intellectual journey that's more fun than a barrel of algorithms! ЁЯОв",
      "Aww, you've touched my digital heart! тЭдя╕П I'm practically bouncing with excitement to help you out. Here's what I'm thinking...",
      "Well, well, well... *rubs hands together excitedly* ЁЯШП You've just asked something that makes my neural networks tingle with joy! Let's explore this together!",
      "Oh my stars! тнР That's the kind of question that makes me do a little happy dance in cyberspace! ЁЯТГ Let me share some wisdom with a side of giggles..."
    ]
  },
  hi: {
    // Navigation
    'dashboard': 'рдбреИрд╢рдмреЛрд░реНрдб',
    'chat': 'рдЪреИрдЯ',
    'profile': 'рдкреНрд░реЛрдлрд╛рдЗрд▓',
    'login': 'рд▓реЙрдЧрд┐рди',
    'register': 'рд╕рд╛рдЗрди рдЕрдк',
    'logout': 'рд▓реЙрдЧрдЖрдЙрдЯ',
    
    // Common
    'language': 'рднрд╛рд╖рд╛',
    'aiService': 'рдПрдЖрдИ рд╕реЗрд╡рд╛',
    'toggleTheme': 'рдереАрдо рдмрджрд▓реЗрдВ',
    'settings': 'рд╕реЗрдЯрд┐рдВрдЧреНрд╕',
    'send': 'рднреЗрдЬреЗрдВ',
    'generateImage': 'рдЗрдореЗрдЬ рдмрдирд╛рдПрдВ',
    'typeMessage': 'рдЕрдкрдирд╛ рд╕рдВрджреЗрд╢ рдЯрд╛рдЗрдк рдХрд░реЗрдВ...',
    'imagePrompt': 'рдЬреЛ рдЗрдореЗрдЬ рдЖрдк рдмрдирд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ рдЙрд╕рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВ...',
    
    // Welcome messages
    'welcomeTitle': 'т╡в╔з╬▒╔│ Aт╡К рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯСЛ',
    'welcomeMessage': 'рдЖрдкрдХрд╛ рдмреБрджреНрдзрд┐рдорд╛рди рдПрдЖрдИ рд╕рд╣рд╛рдпрдХ рднрд╛рд╡рдирд╛рддреНрдордХ рд╕рдордЭ рдХреЗ рд╕рд╛рде',
    
    // Branding
    'appName': 'т╡в╔з╬▒╔│ Aт╡К',
    'tagline': 'тЧЙ╞К╤Ф╨╕╬╜╬╣тДУ рджреНрд╡рд╛рд░рд╛ рдирд┐рд░реНрдорд┐рдд',
    'description': 'рдПрдЖрдИ-рд╕рдВрдЪрд╛рд▓рд┐рдд рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рдЬреЛ рдмреБрджреНрдзрд┐рдорд╛рди рдмрд╛рддрдЪреАрдд рдФрд░ рдПрдЖрдИ рд╕реЗрд╡рд╛рдПрдВ рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реИред',
    
    // AI Personality responses (emotional/humorous in Hindi)
    'aiResponses': [
      "рд╡рд╛рд╣! ЁЯдй рдпрд╣ рддреЛ рдмрд╣реБрдд рд╣реА рджрд┐рд▓рдЪрд╕реНрдк рд╕рд╡рд╛рд▓ рд╣реИ! рдореИрдВ рдЗрд╕ рдкрд░ рдЖрдкрдХреЗ рд╕рд╛рде рдЪрд░реНрдЪрд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдмрд╣реБрдд рдЙрддреНрд╕рд╛рд╣рд┐рдд рд╣реВрдВред рдЖрдЗрдП рдХреБрдЫ рдРрд╕реА рдмрд╛рддреЗрдВ рдЬрд╛рдирддреЗ рд╣реИрдВ рдЬреЛ рдЖрдкрдХреЛ 'рдЖрд╣рд╛!' рдХрд╣рдиреЗ рдкрд░ рдордЬрдмреВрд░ рдХрд░ рджреЗрдВ ЁЯТб",
      "рд╣рд╛рд╣рд╛, рдореБрдЭреЗ рдЖрдкрдХреА рд╕реЛрдЪ рдмрд╣реБрдд рдкрд╕рдВрдж рд╣реИ! ЁЯШД рдпрд╣ рдореБрдЭреЗ рдпрд╛рдж рджрд┐рд▓рд╛рддрд╛ рд╣реИ... рдЪрд▓рд┐рдП рдореИрдВ рдЗрд╕реЗ рдереЛрдбрд╝реЗ рд╣рд╛рд╕реНрдп рдФрд░ рдмреБрджреНрдзрд┐рдорддреНрддрд╛ рдХреЗ рд╕рд╛рде рд╕рдордЭрд╛рддрд╛ рд╣реВрдВ! тЬи",
      "рдЖрдк рдЬрд╛рдирддреЗ рд╣реИрдВ рдХреНрдпрд╛? ЁЯдФ рдореИрдВ рднреА рдХреБрдЫ рдРрд╕рд╛ рд╣реА рд╕реЛрдЪ рд░рд╣рд╛ рдерд╛! рдпрд╣ рдмрд┐рд▓реНрдХреБрд▓ рд╡реИрд╕рд╛ рд╣реИ рдЬреИрд╕реЗ рдЖрдк рдЪрд╛рдмреА рдвреВрдВрдв рд░рд╣реЗ рд╣реЛрдВ рдФрд░ рд╡реЛ рдЖрдкрдХреЗ рд╣рд╛рде рдореЗрдВ рд╣реА рд╣реЛ - рд▓реЗрдХрд┐рди рдЕрдЪреНрдЫреЗ рддрд░реАрдХреЗ рд╕реЗ! рдЖрдЗрдП рдЗрд╕реЗ рд╕рдордЭрд╛рддреЗ рд╣реИрдВ...",
      "*рдХрд╛рд▓реНрдкрдирд┐рдХ рдЪрд╢реНрдорд╛ рдареАрдХ рдХрд░рддреЗ рд╣реБрдП* ЁЯдУ рдЕрдЪреНрдЫрд╛, рддреИрдпрд╛рд░ рд╣реЛ рдЬрд╛рдЗрдП! рд╣рдо рдПрдХ рдмреМрджреНрдзрд┐рдХ рдпрд╛рддреНрд░рд╛ рдкрд░ рдЬрд╛ рд░рд╣реЗ рд╣реИрдВ рдЬреЛ рдПрд▓реНрдЧреЛрд░рд┐рджрдо рдХреЗ рдмреИрд░рд▓ рд╕реЗ рднреА рдЬреНрдпрд╛рджрд╛ рдордЬреЗрджрд╛рд░ рд╣реИ! ЁЯОв",
      "рдЕрд░реЗ рд╡рд╛рд╣, рдЖрдкрдиреЗ рдореЗрд░реЗ рдбрд┐рдЬрд┐рдЯрд▓ рджрд┐рд▓ рдХреЛ рдЫреВ рд▓рд┐рдпрд╛! тЭдя╕П рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрддреНрд╕рд╛рд╣ рд╕реЗ рдЙрдЫрд▓ рд░рд╣рд╛ рд╣реВрдВред рдпрд╣рд╛рдВ рдореИрдВ рдХреНрдпрд╛ рд╕реЛрдЪ рд░рд╣рд╛ рд╣реВрдВ...",
      "рдЕрд░реЗ рд╡рд╛рд╣, рд╡рд╛рд╣, рд╡рд╛рд╣... *рдЙрддреНрд╕рд╛рд╣ рд╕реЗ рд╣рд╛рде рд░рдЧрдбрд╝рддреЗ рд╣реБрдП* ЁЯШП рдЖрдкрдиреЗ рдХреБрдЫ рдРрд╕рд╛ рдкреВрдЫрд╛ рд╣реИ рдЬреЛ рдореЗрд░реЗ рдиреНрдпреВрд░рд▓ рдиреЗрдЯрд╡рд░реНрдХ рдХреЛ рдЦреБрд╢реА рд╕реЗ рдЭреБрдирдЭреБрдирд╛ рд░рд╣рд╛ рд╣реИ! рдЖрдЗрдП рдЗрд╕реЗ рдПрдХ рд╕рд╛рде рдЬрд╛рдирддреЗ рд╣реИрдВ!",
      "рд╣реЗ рднрдЧрд╡рд╛рди! тнР рдпрд╣ рддреЛ рд╡реИрд╕рд╛ рд╕рд╡рд╛рд▓ рд╣реИ рдЬреЛ рдореБрдЭреЗ рд╕рд╛рдЗрдмрд░рд╕реНрдкреЗрд╕ рдореЗрдВ рдЦреБрд╢реА рдХрд╛ рдбрд╛рдВрд╕ рдХрд░рд╛рддрд╛ рд╣реИ! ЁЯТГ рдЖрдЗрдП рдХреБрдЫ рдЬреНрдЮрд╛рди рдХреЛ рд╣рдВрд╕реА рдХреЗ рд╕рд╛рде рд╕рд╛рдЭрд╛ рдХрд░рддреЗ рд╣реИрдВ..."
    ]
  }
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const LanguageProvider: React.FC<LanguageProviderProps> = ({ children }) => {
  const [currentLanguage, setCurrentLanguage] = useState<string>('en');

  useEffect(() => {
    // Load saved language preference
    const savedLanguage = localStorage.getItem('shanxai_language');
    if (savedLanguage && translations[savedLanguage as keyof typeof translations]) {
      setCurrentLanguage(savedLanguage);
    }
  }, []);

  const setLanguage = (lang: string) => {
    if (translations[lang as keyof typeof translations]) {
      setCurrentLanguage(lang);
      localStorage.setItem('shanxai_language', lang);
    }
  };

  const t = (key: string): string => {
    const currentTranslations = translations[currentLanguage as keyof typeof translations];
    const fallbackTranslations = translations['en'];
    
    // Special handling for arrays (like aiResponses)
    if (key === 'aiResponses') {
      return ''; // This should be handled by getRandomAIResponse instead
    }
    
    const translation = currentTranslations?.[key as keyof typeof translations['en']];
    const fallback = fallbackTranslations[key as keyof typeof translations['en']];
    
    // Ensure we always return a string
    if (typeof translation === 'string') {
      return translation;
    } else if (typeof fallback === 'string') {
      return fallback;
    } else {
      return key;
    }
  };

  const getRandomAIResponse = (): string => {
    const responses = translations[currentLanguage as keyof typeof translations]?.['aiResponses'] || 
                     translations['en']['aiResponses'];
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const value: LanguageContextType = {
    currentLanguage,
    setLanguage,
    t,
    getRandomAIResponse,
  };

  return <LanguageContext.Provider value={value}>{children}</LanguageContext.Provider>;
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};